version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: paxeer-postgres
    environment:
      POSTGRES_DB: paxeer
      POSTGRES_USER: pax
      POSTGRES_PASSWORD: pax
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./Off-Chain-Server/migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pax -d paxeer"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - paxeer-network

  # Paxeer Indexer Service
  indexer:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: paxeer-indexer
    command: ["./bin/indexer", "-config", "configs/config.yaml"]
    environment:
      PAXEER_RPC_HTTP: "https://v1-api.paxeer.app/rpc"
      PAXEER_RPC_WS: "wss://v1-api.paxeer.app/rpc"
      PAXEER_FACTORY: "0xFB4E790C9f047c96a53eFf08b9F58E96E6730c6a"
      PAXEER_DB_DSN: "postgres://pax:pax@postgres:5432/paxeer?sslmode=disable"
      PAXEER_START_BLOCK: "1"
      PAXEER_CONFIRMATIONS: "2"
      PAXEER_BATCH_SIZE: "5000"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - indexer_logs:/app/logs
    restart: unless-stopped
    networks:
      - paxeer-network
    healthcheck:
      test: ["CMD-SHELL", "pgrep -f indexer || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Paxeer API Service
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: paxeer-api
    command: ["./bin/api", "-config", "configs/config.yaml"]
    environment:
      PAXEER_API_ADDR: ":8080"
      PAXEER_DB_DSN: "postgres://pax:pax@postgres:5432/paxeer?sslmode=disable"
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - api_logs:/app/logs
    restart: unless-stopped
    networks:
      - paxeer-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis (Optional - for caching)
  redis:
    image: redis:7-alpine
    container_name: paxeer-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    networks:
      - paxeer-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: paxeer-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
    restart: unless-stopped
    networks:
      - paxeer-network
    profiles:
      - production

  # Prometheus Monitoring (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: paxeer-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - paxeer-network
    profiles:
      - monitoring

  # Grafana Dashboard (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: paxeer-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - paxeer-network
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  indexer_logs:
    driver: local
  api_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  paxeer-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
